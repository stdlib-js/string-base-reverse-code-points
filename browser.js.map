{"version":3,"file":"browser.js","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/; // TODO: replace with stdlib pkg\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/; // TODO: replace with stdlib pkg\n\n\n// MAIN //\n\n/**\n* Reverses the Unicode code points of a string.\n*\n* @param {string} str - input string\n* @returns {string} output string\n*\n* @example\n* var out = reverse( 'last man standing' );\n* // returns 'gnidnats nam tsal'\n*\n* @example\n* var out = reverse( 'presidential election' );\n* // returns 'noitcele laitnediserp'\n*\n* @example\n* var out = reverse( 'JavaScript' );\n* // returns 'tpircSavaJ'\n*\n* @example\n* var out = reverse( 'Hidden Treasures' );\n* // returns 'serusaerT neddiH'\n*/\nfunction reverse( str ) {\n\tvar len;\n\tvar out;\n\tvar ch1;\n\tvar ch2;\n\tvar i;\n\n\tlen = str.length;\n\tout = '';\n\n\t// Process the string one Unicode code unit at a time and count UTF-16 surrogate pairs as a single Unicode code point...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tch1 = str[ i ];\n\n\t\t// Check for a high UTF-16 surrogate...\n\t\tif ( RE_UTF16_HIGH_SURROGATE.test( ch1 ) ) {\n\t\t\t// Check for an unpaired surrogate at the end of the input string...\n\t\t\tif ( i === len-1 ) {\n\t\t\t\t// We found an unpaired surrogate...\n\t\t\t\tout = ch1 + out;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Check whether the high surrogate is paired with a low surrogate...\n\t\t\tch2 = str[ i+1 ];\n\t\t\tif ( RE_UTF16_LOW_SURROGATE.test( ch2 ) ) {\n\t\t\t\t// We found a surrogate pair:\n\t\t\t\tout = ch1 + ch2 + out;\n\t\t\t\ti += 1; // bump the index to process the next code unit\n\t\t\t} else {\n\t\t\t\tout = ch1 + out;\n\t\t\t}\n\t\t} else {\n\t\t\tout = ch1 + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default reverse;\n"],"names":["RE_UTF16_LOW_SURROGATE","RE_UTF16_HIGH_SURROGATE","str","len","out","ch1","ch2","i","length","test"],"mappings":";yCAsBA,IAAIA,EAAyB,kBACzBC,EAA0B,yBA2B9B,SAAkBC,GACjB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAMJ,IAJAJ,EAAMD,EAAIM,OACVJ,EAAM,GAGAG,EAAI,EAAGA,EAAIJ,EAAKI,IAIrB,GAHAF,EAAMH,EAAKK,GAGNN,EAAwBQ,KAAMJ,GAAQ,CAE1C,GAAKE,IAAMJ,EAAI,EAAI,CAElBC,EAAMC,EAAMD,EACZ,KACA,CAEDE,EAAMJ,EAAKK,EAAE,GACRP,EAAuBS,KAAMH,IAEjCF,EAAMC,EAAMC,EAAMF,EAClBG,GAAK,GAELH,EAAMC,EAAMD,CAEhB,MACGA,EAAMC,EAAMD,EAGd,OAAOA,CACR"}